name: Test IzaMedApp

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Pasul 1: Clonează codul
      - name: Checkout code
        uses: actions/checkout@v3

      # Pasul 2: Verifică structura fișierelor (ex. listează fișierele din root)
      - name: List root files
        run: ls -la

      # Pasul 3: Instalează dependențe Node.js (pentru TypeScript)
      - name: Install Node.js dependencies
        run: npm install

      # Pasul 4: Build frontend (dacă ai npm scripts)
      - name: Build frontend
        run: npm run build || echo "No build script, skipping"

      # Pasul 5: Testează Docker (dacă vrei să verifici docker-compose)
      - name: Test Docker Compose
        run: docker-compose config  # Verifică dacă docker-compose.yml este valid

      # Pasul 6: Rulează scripturi custom (ex. deployment.sh)
      - name: Run deployment script
        run: chmod +x deployment.sh && ./deployment.sh || echo "Script failed, check logs"

      # Pasul 7: Orice teste suplimentare (ex. pentru PHP simplu, fără Laravel)
      - name: Simple PHP check
        run: php --version && find . -name "*.php" -exec php -l {} \;  # Verifică sintaxa PHP

      # Opțional: Dacă ai teste unitare, adaugă-le aici
      - name: Run tests
        run: npm test || echo "No tests defined"
